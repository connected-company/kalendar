{"remainingRequest":"/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/workspace/kalendar/src/components/kalendar/kalendar-container.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/david/workspace/kalendar/src/components/kalendar/kalendar-container.vue","mtime":1566979661606},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/babel-loader/lib/index.js","mtime":1564752363126},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js","mtime":1564752367572}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue';\nimport PortalVue from 'portal-vue';\n\nimport Utils from \"./utils.js\";\nwindow.kalendarHelpers = {};\nfor (let util of Object.keys(Utils)) {\n  window.kalendarHelpers[util] = Utils[util];\n}\n\nVue.use(PortalVue);\n\nconst crypto = window.crypto || window.msCrypto; // IE11 Polyfill\n\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n// we are going to use web workers to do the heavy lifting\n// needed for our kalendar component to work and render correctly\nimport myWorker from '@/components/kalendar/workers';\n\nexport default {\n  components: {\n    KalendarWeekView: () =>\n      import('./kalendar-weekview.vue'),\n  },\n  props: {\n    // this provided array will be kept in sync\n    events: {\n      required: true,\n      type: Array,\n      validator: function(val) {\n        return Array.isArray(val);\n      }\n    },\n    // use this to enable/disable stuff which\n    // are supported by Kalendar itself\n    configuration: {\n      type: Object,\n      required: false,\n      validator: function(val) {\n        return typeof val === 'object';\n      },\n    },\n  },\n  data() {\n    let today = kalendarHelpers.getHourlessDate();\n    return {\n      default_options: {\n        dark: false,\n        cell_height: 10,\n        scrollToNow: false,\n        current_day: today,\n        view_type: 'week',\n        style: 'material_design',\n        now: new Date,\n        military_time: true,\n        read_only: false,\n        day_starts_at: 0,\n        day_ends_at: 24,\n        time_mode: 'relative',\n        overlap: true,\n        past_event_creation: true,\n        formatLeftHours: (date) => {\n          return Utils.getDatelessHour(date, this.configuration.military_time);\n        },\n        formatDayTitle: (date) => {\n          let isoDate = new Date(date);\n          let dayName = isoDate.toUTCString().slice(0, 3);\n          let dayNumber = isoDate.getUTCDate();\n          return [dayName, dayNumber];\n        },\n        formatWeekNavigator: (isoDate) => {\n          let startDate = Utils.startOfWeek(isoDate);\n          let endDate = Utils.endOfWeek(isoDate);\n          let startString = startDate.toUTCString().slice(5, 11);\n          let endString = endDate.toUTCString().slice(5, 11);\n          return `${startString} - ${endString}`;\n        },\n        formatDayNavigator: (isoDate) => {\n          let day = new Date(isoDate);\n          return day.toUTCString().slice(5, 11);\n        }\n      },\n      kalendar_events: null,\n      new_appointment: {},\n      scrollable: true,\n    }\n  },\n  computed: {\n    kalendar_options() {\n      let options = this.default_options;\n      let provided_props = this.configuration;\n\n      let conditions = {\n        //dark: (val) => typeof val === 'boolean',\n        scrollToNow: (val) => typeof val === 'boolean',\n        current_week: (val) => val === null,\n        current_day: (val) => !isNaN(Date.parse(val)),\n        view_type: (val) => ['week', 'day'].includes(val),\n        cell_height: (val) => !isNaN(val),\n        style: (val) => ['material_design', 'flat_design'].includes(val),\n        military_time: (val) => typeof val === 'boolean',\n        read_only: (val) => typeof val === 'boolean',\n        day_starts_at: (val) => {\n          return typeof val === 'number' &&\n            val >= 0 &&\n            val <= 24;\n        },\n        day_ends_at: (val) => {\n          return typeof val === 'number' &&\n            val >= 0 &&\n            val <= 24;\n        },\n        hide_dates: val => Array.isArray(val),\n        hide_days: val => Array.isArray(val) && !val.find(n => typeof n !== 'number'),\n        overlap: val => typeof val === 'boolean',\n        past_event_creation: val => typeof val === 'boolean',\n        formatLeftHours: val => typeof val === 'function',\n        formatDayTitle: val => typeof val === 'function',\n        formatWeekNavigator: val => typeof val === 'function'\n      };\n      for (let key in provided_props) {\n        if (conditions.hasOwnProperty(key) && conditions[key](provided_props[key])) {\n          options[key] = provided_props[key];\n        }\n      }\n      return options;\n    }\n  },\n  created() {\n    this.kalendar_events = this.events.map(event => ({\n      ...event,\n      id: event.id || kalendarHelpers.generateUUID()\n    }));\n\n    this.$kalendar.getEvents = () => {\n      return this.kalendar_events.slice(0);\n    }\n\n    this.$kalendar.updateEvents = (payload) => {\n      this.kalendar_events = payload.map(event => ({\n        ...event,\n        id: event.id || kalendarHelpers.generateUUID()\n      }));\n      this.$emit('update:events', payload.map(event => ({\n        from: event.from,\n        to: event.to,\n        data: event.data\n      })));\n    };\n  },\n  provide() {\n    const provider = {}\n    Object.defineProperty(provider, 'kalendar_options', {\n      enumerable: true,\n      get: () => this.kalendar_options,\n    });\n    Object.defineProperty(provider, 'kalendar_events', {\n      enumerable: true,\n      get: () => this.kalendar_events,\n    });\n    return provider;\n  },\n  methods: {\n    previousDay() {\n      let { current_day } = this.kalendar_options;\n      let target_day = kalendarHelpers.addDays(current_day, -1);\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: target_day.toISOString()\n      };\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    nextDay() {\n      let { current_day } = this.kalendar_options;\n      let target_day = kalendarHelpers.addDays(current_day, 1);\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: target_day.toISOString()\n      };\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    previousWeek() {\n      let { current_day } = this.kalendar_options;\n      let nextWeek = new Date(current_day);\n      nextWeek.setDate(nextWeek.getDate() - 7);\n      nextWeek.setUTCHours(0, 0, 0, 0);\n\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: nextWeek.toISOString()\n      };\n\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    nextWeek() {\n      let { current_day } = this.kalendar_options;\n      let nextWeek = new Date(current_day);\n      nextWeek.setDate(nextWeek.getDate() + 7);\n      nextWeek.setUTCHours(0, 0, 0, 0);\n\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: nextWeek.toISOString()\n      };\n\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    getTime(date) {\n      let dateObj = new Date(date);\n      let minutes = dateObj.getUTCHours().toString().padStart(2, 0);\n      let seconds = dateObj.getUTCMinutes().toString().padStart(2, 0);\n      return `${minutes}:${seconds}`;\n    },\n    addAppointment(popup_info) {\n      let payload = {\n        data: {\n          title: this.new_appointment.title,\n          description: this.new_appointment.description,\n        },\n        from: popup_info.start_time,\n        to: popup_info.end_time,\n      };\n\n      this.$kalendar.addNewEvent(\n        payload,\n      );\n      this.$kalendar.closePopups();\n      this.clearFormData();\n    },\n    clearFormData() {\n      this.new_appointment = {\n        description: null,\n        title: null,\n      };\n    },\n    closePopups() {\n      this.$kalendar.closePopups();\n    },\n  }\n}\n",{"version":3,"sources":["kalendar-container.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"kalendar-container.vue","sourceRoot":"src/components/kalendar","sourcesContent":["<template>\n  <div class=\"kalendar-wrapper\"\n       :class=\"{\n            'no-scroll': !scrollable,\n            'gstyle': kalendar_options.style === 'material_design',\n            'day-view': kalendar_options.view_type === 'day',\n    }\"\n       @touchstart=\"scrollable = false\"\n       @touchend=\"scrollable = true\">\n    <div class=\"week-navigator\">\n      <div class=\"nav-wrapper\"\n           v-if=\"kalendar_options.view_type === 'week'\">\n        <button class=\"week-navigator-button\" @click=\"previousWeek()\">\n          <svg style=\"transform: rotate(180deg)\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-i6dzq1\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n        </button>\n        <div>\n          <span>{{ kalendar_options.formatWeekNavigator(kalendar_options.current_day) }}</span>\n        </div>\n        <button class=\"week-navigator-button\" @click=\"nextWeek()\">\n          <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-i6dzq1\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n        </button>\n      </div>\n      <div class=\"nav-wrapper\"\n           v-if=\"kalendar_options.view_type === 'day'\">\n        <button class=\"week-navigator-button\" @click=\"previousDay()\">\n          <svg style=\"transform: rotate(180deg)\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-i6dzq1\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n        </button>\n        <div>\n          <span>{{ kalendar_options.formatDayNavigator(kalendar_options.current_day) }}</span>\n        </div>\n        <button class=\"week-navigator-button\" @click=\"nextDay()\">\n          <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-i6dzq1\"><polyline points=\"9 18 15 12 9 6\"></polyline></svg>\n        </button>\n      </div>\n    </div>\n    <kalendar-week-view />\n    <portal to=\"event-creation\"\n            class=\"slotable\">\n      <div slot-scope=\"information\"\n           class=\"creating-event\">\n        <slot name=\"creating-card\"\n              :event_information=\"information\">\n          <h4 class=\"appointment-title\"\n              style=\"text-align: left;\">\n            New Appointment\n          </h4>\n          <span class=\"time\">\n            {{getTime(information.start_time)}}\n            -\n            {{getTime(information.end_time)}}\n          </span>\n        </slot>\n      </div>\n    </portal>\n    <portal to=\"event-popup-form\"\n            class=\"slotable\">\n      <div slot-scope=\"information\"\n           class=\"popup-event\">\n        <slot name=\"popup-form\"\n              :popup_information=\"information\">\n          <h4 style=\"margin-bottom: 10px\">\n            New Appointment\n          </h4>\n          <input v-model=\"new_appointment['title']\"\n                 type=\"text\"\n                 name=\"title\"\n                 placeholder=\"Title\">\n          <textarea v-model=\"new_appointment['description']\"\n                    type=\"text\"\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    rows=\"2\"></textarea>\n          <div class=\"buttons\">\n            <button class=\"cancel\"\n                    @click=\"closePopups()\">\n              Cancel\n            </button>\n            <button @click=\"addAppointment(information)\">\n              Save\n            </button>\n          </div>\n        </slot>\n      </div>\n    </portal>\n    <portal to=\"event-details\"\n            class=\"slotable\">\n      <div slot-scope=\"information\"\n           class=\"created-event\">\n        <slot name=\"created-card\"\n              :event_information=\"information\">\n          <h4 style=\"margin-bottom: 5px\">{{information.title}}</h4>\n          <p>{{information.description}}</p>\n        </slot>\n      </div>\n    </portal>\n  </div>\n</template>\n<script>\nimport Vue from 'vue';\nimport PortalVue from 'portal-vue';\n\nimport Utils from \"./utils.js\";\nwindow.kalendarHelpers = {};\nfor (let util of Object.keys(Utils)) {\n  window.kalendarHelpers[util] = Utils[util];\n}\n\nVue.use(PortalVue);\n\nconst crypto = window.crypto || window.msCrypto; // IE11 Polyfill\n\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n// we are going to use web workers to do the heavy lifting\n// needed for our kalendar component to work and render correctly\nimport myWorker from '@/components/kalendar/workers';\n\nexport default {\n  components: {\n    KalendarWeekView: () =>\n      import('./kalendar-weekview.vue'),\n  },\n  props: {\n    // this provided array will be kept in sync\n    events: {\n      required: true,\n      type: Array,\n      validator: function(val) {\n        return Array.isArray(val);\n      }\n    },\n    // use this to enable/disable stuff which\n    // are supported by Kalendar itself\n    configuration: {\n      type: Object,\n      required: false,\n      validator: function(val) {\n        return typeof val === 'object';\n      },\n    },\n  },\n  data() {\n    let today = kalendarHelpers.getHourlessDate();\n    return {\n      default_options: {\n        dark: false,\n        cell_height: 10,\n        scrollToNow: false,\n        current_day: today,\n        view_type: 'week',\n        style: 'material_design',\n        now: new Date,\n        military_time: true,\n        read_only: false,\n        day_starts_at: 0,\n        day_ends_at: 24,\n        time_mode: 'relative',\n        overlap: true,\n        past_event_creation: true,\n        formatLeftHours: (date) => {\n          return Utils.getDatelessHour(date, this.configuration.military_time);\n        },\n        formatDayTitle: (date) => {\n          let isoDate = new Date(date);\n          let dayName = isoDate.toUTCString().slice(0, 3);\n          let dayNumber = isoDate.getUTCDate();\n          return [dayName, dayNumber];\n        },\n        formatWeekNavigator: (isoDate) => {\n          let startDate = Utils.startOfWeek(isoDate);\n          let endDate = Utils.endOfWeek(isoDate);\n          let startString = startDate.toUTCString().slice(5, 11);\n          let endString = endDate.toUTCString().slice(5, 11);\n          return `${startString} - ${endString}`;\n        },\n        formatDayNavigator: (isoDate) => {\n          let day = new Date(isoDate);\n          return day.toUTCString().slice(5, 11);\n        }\n      },\n      kalendar_events: null,\n      new_appointment: {},\n      scrollable: true,\n    }\n  },\n  computed: {\n    kalendar_options() {\n      let options = this.default_options;\n      let provided_props = this.configuration;\n\n      let conditions = {\n        //dark: (val) => typeof val === 'boolean',\n        scrollToNow: (val) => typeof val === 'boolean',\n        current_week: (val) => val === null,\n        current_day: (val) => !isNaN(Date.parse(val)),\n        view_type: (val) => ['week', 'day'].includes(val),\n        cell_height: (val) => !isNaN(val),\n        style: (val) => ['material_design', 'flat_design'].includes(val),\n        military_time: (val) => typeof val === 'boolean',\n        read_only: (val) => typeof val === 'boolean',\n        day_starts_at: (val) => {\n          return typeof val === 'number' &&\n            val >= 0 &&\n            val <= 24;\n        },\n        day_ends_at: (val) => {\n          return typeof val === 'number' &&\n            val >= 0 &&\n            val <= 24;\n        },\n        hide_dates: val => Array.isArray(val),\n        hide_days: val => Array.isArray(val) && !val.find(n => typeof n !== 'number'),\n        overlap: val => typeof val === 'boolean',\n        past_event_creation: val => typeof val === 'boolean',\n        formatLeftHours: val => typeof val === 'function',\n        formatDayTitle: val => typeof val === 'function',\n        formatWeekNavigator: val => typeof val === 'function'\n      };\n      for (let key in provided_props) {\n        if (conditions.hasOwnProperty(key) && conditions[key](provided_props[key])) {\n          options[key] = provided_props[key];\n        }\n      }\n      return options;\n    }\n  },\n  created() {\n    this.kalendar_events = this.events.map(event => ({\n      ...event,\n      id: event.id || kalendarHelpers.generateUUID()\n    }));\n\n    this.$kalendar.getEvents = () => {\n      return this.kalendar_events.slice(0);\n    }\n\n    this.$kalendar.updateEvents = (payload) => {\n      this.kalendar_events = payload.map(event => ({\n        ...event,\n        id: event.id || kalendarHelpers.generateUUID()\n      }));\n      this.$emit('update:events', payload.map(event => ({\n        from: event.from,\n        to: event.to,\n        data: event.data\n      })));\n    };\n  },\n  provide() {\n    const provider = {}\n    Object.defineProperty(provider, 'kalendar_options', {\n      enumerable: true,\n      get: () => this.kalendar_options,\n    });\n    Object.defineProperty(provider, 'kalendar_events', {\n      enumerable: true,\n      get: () => this.kalendar_events,\n    });\n    return provider;\n  },\n  methods: {\n    previousDay() {\n      let { current_day } = this.kalendar_options;\n      let target_day = kalendarHelpers.addDays(current_day, -1);\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: target_day.toISOString()\n      };\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    nextDay() {\n      let { current_day } = this.kalendar_options;\n      let target_day = kalendarHelpers.addDays(current_day, 1);\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: target_day.toISOString()\n      };\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    previousWeek() {\n      let { current_day } = this.kalendar_options;\n      let nextWeek = new Date(current_day);\n      nextWeek.setDate(nextWeek.getDate() - 7);\n      nextWeek.setUTCHours(0, 0, 0, 0);\n\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: nextWeek.toISOString()\n      };\n\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    nextWeek() {\n      let { current_day } = this.kalendar_options;\n      let nextWeek = new Date(current_day);\n      nextWeek.setDate(nextWeek.getDate() + 7);\n      nextWeek.setUTCHours(0, 0, 0, 0);\n\n      let config = kalendarHelpers.cloneObject(this.configuration);\n      config = {\n        ...config,\n        current_day: nextWeek.toISOString()\n      };\n\n      this.$emit('update:configuration', config);\n      setTimeout(() => {\n        this.$kalendar.buildWeek();\n      });\n    },\n    getTime(date) {\n      let dateObj = new Date(date);\n      let minutes = dateObj.getUTCHours().toString().padStart(2, 0);\n      let seconds = dateObj.getUTCMinutes().toString().padStart(2, 0);\n      return `${minutes}:${seconds}`;\n    },\n    addAppointment(popup_info) {\n      let payload = {\n        data: {\n          title: this.new_appointment.title,\n          description: this.new_appointment.description,\n        },\n        from: popup_info.start_time,\n        to: popup_info.end_time,\n      };\n\n      this.$kalendar.addNewEvent(\n        payload,\n      );\n      this.$kalendar.closePopups();\n      this.clearFormData();\n    },\n    clearFormData() {\n      this.new_appointment = {\n        description: null,\n        title: null,\n      };\n    },\n    closePopups() {\n      this.$kalendar.closePopups();\n    },\n  }\n}\n</script>\n<style lang=\"scss\"\n       src=\"./main.scss\"></style>\n"]}]}