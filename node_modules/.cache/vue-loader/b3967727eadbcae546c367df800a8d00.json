{"remainingRequest":"/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/workspace/kalendar/src/components/kalendar/kalendar-cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/david/workspace/kalendar/src/components/kalendar/kalendar-cell.vue","mtime":1566976249008},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/babel-loader/lib/index.js","mtime":1564752363126},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js","mtime":1564752367572}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst { cloneObject } = window.kalendarHelpers;\n\nexport default {\n  props: ['creator', 'index', 'cellData', 'constructedEvents', 'temporaryEvent'],\n  inject: ['kalendar_options'],\n  components: {\n    KalendarEvent: () => import('./kalendar-event.vue'),\n  },\n  computed: {\n    cell_events() {\n      let all_events = [];\n      if (this.completed_events) {\n        all_events = all_events.concat(this.completed_events);\n      }\n      if (this.being_created) {\n        all_events = all_events.concat(this.being_created);\n      }\n      return all_events;\n    },\n    completed_events() {\n      return this.constructedEvents &&\n        this.constructedEvents.hasOwnProperty(this.cellData.value) &&\n        this.constructedEvents[this.cellData.value];\n    },\n    being_created() {\n      return (this.temporaryEvent &&\n        this.temporaryEvent.start.value === this.cellData.value &&\n        this.temporaryEvent);\n    },\n    overlappingEvents() {\n      if (!this.constructedEvents || this.cell_events.length < 1) return [];\n      return Object.keys(this.constructedEvents)\n        .map(evKey => {\n          return this.constructedEvents[evKey]\n        })\n        .flat()\n        .filter(event => {\n          let cellDate = new Date(this.cellData.value);\n          let eventStarts = new Date(event.start.value);\n          let eventEnds = new Date(event.end.value);\n          return eventStarts < cellDate && eventEnds > cellDate;\n        });\n    },\n    overlapValue() {\n      let length = this.overlappingEvents.length;\n      return length > 2 ? 2 : length;\n    },\n    selected() {\n      return this.cell_events && this.cell_events.length > 0;\n    },\n    hasPopups() {\n      return this.selected && !!this.cell_events.find(ev => ev.status === 'popup-initiated');\n    }\n  },\n  methods: {\n    mouseDown() {\n      // user mouse got depressed while outside kalendar-cells\n      // came back in and clicked while the creator was on\n      if (!!this.creator.creating) {\n        this.mouseUp();\n        return;\n      }\n      let { read_only, overlap, past_event_creation } = this.kalendar_options;\n      if(read_only) return;\n\n      // if past_event_creation is set to false, check if cell value is\n      // before current time\n      if (past_event_creation === false) {\n        let now = kalendarHelpers.getLocaleTime(new Date());\n        if (new Date(now) > new Date(this.cellData.value)) {\n          this.mouseUp();\n          return;\n        }\n      }\n\n      // if overlap is set to false, prevent selection on top of\n      // other events\n      console.log('Cell events:', this.cell_events.length);\n      if (!overlap && this.cell_events.length > 0) return;\n\n      // close any open popups in the whole kalendar instance\n      // before starting a new one\n      this.$kalendar.closePopups();\n\n      // create a payload consisting of\n      // starting, current, ending and originalStarting cell\n      // starting, current and ending are self explanatory\n      // but originalStarting cell is required\n      // to determine the direction of the scroll/drag\n      let payload = {\n        creating: true,\n        original_starting_cell: cloneObject(this.cellData),\n        starting_cell: cloneObject(this.cellData),\n        current_cell: cloneObject(this.cellData),\n        ending_cell: cloneObject(this.cellData)\n      };\n      this.$emit('select', payload);\n    },\n    mouseMove() {\n      // same guards like in the mouseDown function\n      let { read_only, overlap } = this.kalendar_options;\n      if (read_only) return;\n      if (this.creator && !this.creator.creating) return;\n      let { starting_cell, original_starting_cell, creating } = this.creator;\n\n      // direction of scroll\n      let going_down = this.cellData.index >= starting_cell.index &&\n        starting_cell.index === original_starting_cell.index;\n\n      if (creating) {\n        let payload = {\n          ...this.creator,\n          current_cell: this.cellData,\n          ending_cell: this.cellData,\n          direction: going_down ? 'normal' : 'reverse'\n        };\n        this.$emit('select', payload);\n      }\n    },\n    mouseUp() {\n      if (this.kalendar_options.read_only) return;\n      if (this.creator.creating) {\n        this.$emit('initiatePopup');\n      }\n    },\n    resetCreator() {\n      this.$emit('reset');\n    },\n  },\n}\n",{"version":3,"sources":["kalendar-cell.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"kalendar-cell.vue","sourceRoot":"src/components/kalendar","sourcesContent":["<template>\n  <li v-if=\"cellData.visible\"\n      @mouseover.self=\"mouseMove()\"\n      @mousedown.self=\"mouseDown()\"\n      @mouseup=\"mouseUp()\"\n      class=\"kalendar-cell\"\n      :class=\"{\n      'selected': selected, \n      'is-an-hour': (index+1)%(60/10) === 0,\n      'has-events': cell_events && cell_events.length > 0,\n      'being-created': !!being_created || hasPopups\n    }\"\n      :style=\"`\n      height: ${kalendar_options.cell_height}px;\n    `\">\n    <KalendarEvent :style=\"`z-index: 10`\"\n                   v-if=\"cell_events && cell_events.length\"\n                   v-for=\"(event, eventIndex) in cell_events\"\n                   :event=\"event\"\n                   :key=\"eventIndex\"\n                   :total=\"cell_events.length\"\n                   :index=\"eventIndex\"\n                   :overlaps=\"overlapValue\" />\n  </li>\n</template>\n<script>\nconst { cloneObject } = window.kalendarHelpers;\n\nexport default {\n  props: ['creator', 'index', 'cellData', 'constructedEvents', 'temporaryEvent'],\n  inject: ['kalendar_options'],\n  components: {\n    KalendarEvent: () => import('./kalendar-event.vue'),\n  },\n  computed: {\n    cell_events() {\n      let all_events = [];\n      if (this.completed_events) {\n        all_events = all_events.concat(this.completed_events);\n      }\n      if (this.being_created) {\n        all_events = all_events.concat(this.being_created);\n      }\n      return all_events;\n    },\n    completed_events() {\n      return this.constructedEvents &&\n        this.constructedEvents.hasOwnProperty(this.cellData.value) &&\n        this.constructedEvents[this.cellData.value];\n    },\n    being_created() {\n      return (this.temporaryEvent &&\n        this.temporaryEvent.start.value === this.cellData.value &&\n        this.temporaryEvent);\n    },\n    overlappingEvents() {\n      if (!this.constructedEvents || this.cell_events.length < 1) return [];\n      return Object.keys(this.constructedEvents)\n        .map(evKey => {\n          return this.constructedEvents[evKey]\n        })\n        .flat()\n        .filter(event => {\n          let cellDate = new Date(this.cellData.value);\n          let eventStarts = new Date(event.start.value);\n          let eventEnds = new Date(event.end.value);\n          return eventStarts < cellDate && eventEnds > cellDate;\n        });\n    },\n    overlapValue() {\n      let length = this.overlappingEvents.length;\n      return length > 2 ? 2 : length;\n    },\n    selected() {\n      return this.cell_events && this.cell_events.length > 0;\n    },\n    hasPopups() {\n      return this.selected && !!this.cell_events.find(ev => ev.status === 'popup-initiated');\n    }\n  },\n  methods: {\n    mouseDown() {\n      // user mouse got depressed while outside kalendar-cells\n      // came back in and clicked while the creator was on\n      if (!!this.creator.creating) {\n        this.mouseUp();\n        return;\n      }\n      let { read_only, overlap, past_event_creation } = this.kalendar_options;\n      if(read_only) return;\n\n      // if past_event_creation is set to false, check if cell value is\n      // before current time\n      if (past_event_creation === false) {\n        let now = kalendarHelpers.getLocaleTime(new Date());\n        if (new Date(now) > new Date(this.cellData.value)) {\n          this.mouseUp();\n          return;\n        }\n      }\n\n      // if overlap is set to false, prevent selection on top of\n      // other events\n      console.log('Cell events:', this.cell_events.length);\n      if (!overlap && this.cell_events.length > 0) return;\n\n      // close any open popups in the whole kalendar instance\n      // before starting a new one\n      this.$kalendar.closePopups();\n\n      // create a payload consisting of\n      // starting, current, ending and originalStarting cell\n      // starting, current and ending are self explanatory\n      // but originalStarting cell is required\n      // to determine the direction of the scroll/drag\n      let payload = {\n        creating: true,\n        original_starting_cell: cloneObject(this.cellData),\n        starting_cell: cloneObject(this.cellData),\n        current_cell: cloneObject(this.cellData),\n        ending_cell: cloneObject(this.cellData)\n      };\n      this.$emit('select', payload);\n    },\n    mouseMove() {\n      // same guards like in the mouseDown function\n      let { read_only, overlap } = this.kalendar_options;\n      if (read_only) return;\n      if (this.creator && !this.creator.creating) return;\n      let { starting_cell, original_starting_cell, creating } = this.creator;\n\n      // direction of scroll\n      let going_down = this.cellData.index >= starting_cell.index &&\n        starting_cell.index === original_starting_cell.index;\n\n      if (creating) {\n        let payload = {\n          ...this.creator,\n          current_cell: this.cellData,\n          ending_cell: this.cellData,\n          direction: going_down ? 'normal' : 'reverse'\n        };\n        this.$emit('select', payload);\n      }\n    },\n    mouseUp() {\n      if (this.kalendar_options.read_only) return;\n      if (this.creator.creating) {\n        this.$emit('initiatePopup');\n      }\n    },\n    resetCreator() {\n      this.$emit('reset');\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\n$creator-bg: #34aadc;\n$creator-content: white;\n\nli {\n  font-size: 13px;\n  position: relative;\n}\n\n.created-events {\n  //width: 100%;\n  height: 100%;\n}\n\nul.building-blocks {\n  li {\n    z-index: 0;\n    border-bottom: dotted 1px var(--odd-cell-border-color);\n\n    &.first_of_appointment {\n      z-index: 1;\n      opacity: 1; //z-index:0;\n    }\n\n    &.is-an-hour {\n      border-bottom: solid 1px var(--table-cell-border-color);\n    }\n\n    &.has-events {\n      z-index: unset;\n    }\n\n    &.being-created {\n      z-index: 11;\n    }\n  }\n}\n</style>"]}]}