{"remainingRequest":"/home/david/workspace/kalendar/node_modules/babel-loader/lib/index.js!/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/workspace/kalendar/src/components/kalendar/kalendar-day.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/david/workspace/kalendar/src/components/kalendar/kalendar-day.vue","mtime":1566976249008},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/babel-loader/lib/index.js","mtime":1564752363126},{"path":"/home/david/workspace/kalendar/node_modules/cache-loader/dist/cjs.js","mtime":1564752366860},{"path":"/home/david/workspace/kalendar/node_modules/vue-loader/lib/index.js","mtime":1564752367572}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.date.to-iso-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.array.some\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _defineProperty from \"/home/david/workspace/kalendar/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.promise\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar cloneObject = window.kalendarHelpers.cloneObject;\nimport Utils from \"./utils\";\nvar _isToday = Utils.isToday,\n    _isWeekend = Utils.isWeekend;\nimport myWorker from '@/components/kalendar/workers';\nexport default {\n  props: ['day', 'passedTime'],\n  created: function created() {\n    // get and render day cells\n    // and then render any event\n    // on top of them\n    this.renderDay();\n  },\n  components: {\n    kalendarCell: function kalendarCell() {\n      return import(\"./kalendar-cell.vue\");\n    }\n  },\n  provide: function provide() {\n    // provide these methods to children components\n    // for easier access\n    return {\n      kalendarAddEvent: this.addEvent,\n      kalendarClearPopups: this.clearCreatingLeftovers\n    };\n  },\n  // inject kalendar options from parent component\n  inject: ['kalendar_options'],\n  mounted: function mounted() {\n    if (this.kalendar_options.scrollToNow && this.isToday) this.scrollView();\n  },\n  computed: {\n    isWeekend: function isWeekend() {\n      return _isWeekend(this.day.value);\n    },\n    isToday: function isToday() {\n      return _isToday(this.day.value);\n    }\n  },\n  data: function data() {\n    return {\n      // this is the main object\n      // we use to make selections\n      // and control their flows\n      creator: {\n        creating: false,\n        starting_cell: null,\n        original_starting_cell: null,\n        current_cell: null,\n        ending_cell: null,\n        status: null\n      },\n      // temporary event is an object\n      // that holds values of creator\n      // when the popup is initiated\n      temporary_event: null,\n      // day cells and events are used for rendering purposes\n      day_cells: [],\n      day_events: null\n    };\n  },\n  methods: {\n    renderDay: function renderDay() {\n      var _this = this;\n\n      myWorker.send('getDayCells', {\n        day: this.day.value,\n        hourOptions: {\n          start_hour: this.kalendar_options.day_starts_at,\n          end_hour: this.kalendar_options.day_ends_at\n        }\n      }).then(function (reply) {\n        _this.day_cells = reply;\n        return _this.getDayEvents(_this.$kalendar.getEvents());\n      });\n    },\n    addEvent: function addEvent(payload) {\n      var _this2 = this;\n\n      // validation\n      var validation_message = this.checkEventValidity(payload);\n\n      if (validation_message !== null) {\n        return Promise.reject(validation_message);\n      } // use web worker to generate event\n      // and then render it in the day_events objects\n\n\n      var from = payload.from,\n          to = payload.to;\n      from = kalendarHelpers.getLocaleTime(from);\n      to = kalendarHelpers.getLocaleTime(to);\n      return myWorker.send('constructNewEvent', {\n        event: _objectSpread({}, payload, {\n          from: from,\n          to: to\n        })\n      }).then(function (constructed_event) {\n        var key = constructed_event.key;\n\n        if (_this2.day_events.hasOwnProperty(key)) {\n          _this2.day_events[key].push(constructed_event);\n        } else {\n          // must use $set since key wasnt present in the object\n          // vue will fail to render it\n          _this2.$set(_this2.day_events, key, [constructed_event]);\n        }\n\n        var events = _this2.$kalendar.getEvents();\n\n        console.log('Adding event to kalendar', payload);\n        events.push(_objectSpread({}, payload, {\n          id: constructed_event.id\n        }));\n\n        _this2.$kalendar.updateEvents(events);\n      });\n    },\n    // this is not called inside this component\n    // but rather from the kalendar-weekview component\n    // which targets it using $refs object.\n    removeEvent: function removeEvent(payload) {\n      var events = this.$kalendar.getEvents();\n      var eventIndex = events.findIndex(function (event) {\n        return event.id === payload.id;\n      });\n      if (eventIndex < 0) return;\n      events.splice(eventIndex, 1);\n      var index = this.day_events[payload.key].findIndex(function (event) {\n        return event.id === payload.id;\n      });\n      this.day_events[payload.key].splice(index, 1);\n      this.$kalendar.updateEvents(events);\n      return Promise.resolve();\n    },\n    checkEventValidity: function checkEventValidity(payload) {\n      var from = payload.from,\n          to = payload.to;\n      if (!from || !to) return 'No dates were provided in the payload';\n      /*if (isoFrom !== from) {\n        return 'From date is not ISO format';\n      }\n      if (isoTo !== to) {\n        return 'To date is not ISO format';\n      }*/\n\n      return null;\n    },\n    getDayEvents: function getDayEvents(events) {\n      var _this3 = this;\n\n      var clonedEvents = events.map(function (event) {\n        return cloneObject(event);\n      });\n      return myWorker.send('constructDayEvents', {\n        events: clonedEvents,\n        day: this.day.value\n      }).then(function (constructed_events) {\n        _this3.day_events = constructed_events;\n      });\n    },\n    clearCreatingLeftovers: function clearCreatingLeftovers() {\n      for (var key in this.day_events) {\n        var hasPending = this.day_events[key].some(function (event) {\n          return event.status === 'popup-initiated' || event.status === 'creating';\n        });\n\n        if (hasPending) {\n          var completed = this.day_events[key].filter(function (event) {\n            return event.status === 'completed';\n          });\n          this.$set(this.day_events, key, completed);\n\n          if (completed.length === 0) {\n            delete this.day_events[key];\n          }\n        }\n      }\n\n      this.resetEvents();\n    },\n    resetEvents: function resetEvents() {\n      if (!this.creator.creating && this.creator.status === null) return;\n      this.creator = {\n        creating: false,\n        starting_cell: null,\n        original_starting_cell: null,\n        current_cell: null,\n        ending_cell: null,\n        status: null,\n        temporary_id: null\n      };\n      this.temporary_event = null;\n    },\n    // this method is what we use\n    // to start the flow of selecting a new cell\n    // while the creator is enabled\n    updateCreator: function updateCreator(payload) {\n      this.creator = _objectSpread({}, this.validateSelection(payload), {\n        status: 'creating'\n      });\n\n      if (this.kalendar_options.overlap === false && Object.keys(this.day_events).length > 0) {\n        var fixedOverlap = this.overlapPolice(payload);\n\n        if (fixedOverlap) {\n          this.creator = this.validateSelection(fixedOverlap);\n          this.selectCell();\n          this.initiatePopup();\n          return;\n        }\n      }\n\n      this.selectCell();\n    },\n    // when the direction is reversed,\n    // the ending cell is actually the originally selected cell\n    validateSelection: function validateSelection(event) {\n      var original_starting_cell = event.original_starting_cell,\n          starting_cell = event.starting_cell,\n          current_cell = event.current_cell;\n\n      if (event.direction === 'reverse' && original_starting_cell.index > current_cell.index) {\n        return _objectSpread({}, event, {\n          starting_cell: current_cell,\n          ending_cell: original_starting_cell\n        });\n      }\n\n      return event;\n    },\n    selectCell: function selectCell() {\n      if (!this.creator.creating) return;\n      var _this$creator = this.creator,\n          creating = _this$creator.creating,\n          ending_cell = _this$creator.ending_cell,\n          current_cell = _this$creator.current_cell,\n          starting_cell = _this$creator.starting_cell,\n          original_starting_cell = _this$creator.original_starting_cell;\n      var real_ending_cell_index = ending_cell.index + 1;\n      ending_cell = this.day_cells[real_ending_cell_index];\n      var diffInMs = new Date(ending_cell.value) - new Date(starting_cell.value);\n      var diffInHrs = Math.floor(diffInMs % 86400000 / 3600000);\n      var diffMins = Math.round(diffInMs % 86400000 % 3600000 / 60000);\n      var startDate = new Date(starting_cell.value);\n      var endDate = new Date(ending_cell.value);\n      var distance = diffMins + diffInHrs * 60;\n      this.temporary_event = {\n        start: {\n          masked_value: startDate.toISOString(),\n          value: startDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        end: {\n          masked_value: endDate.toISOString(),\n          value: endDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        distance: distance,\n        status: 'creating'\n      };\n    },\n    initiatePopup: function initiatePopup() {\n      if (this.creating && this.creator.status !== 'creating') return;\n      this.creator = _objectSpread({}, this.creator, {\n        status: 'popup-initiated',\n        creating: false\n      });\n      var _this$creator2 = this.creator,\n          ending_cell = _this$creator2.ending_cell,\n          current_cell = _this$creator2.current_cell,\n          starting_cell = _this$creator2.starting_cell,\n          original_starting_cell = _this$creator2.original_starting_cell;\n      var real_ending_cell_index = ending_cell.index + 1;\n      ending_cell = this.day_cells[real_ending_cell_index];\n      var diffInMs = new Date(ending_cell.value) - new Date(starting_cell.value);\n      var diffInHrs = Math.floor(diffInMs % 86400000 / 3600000);\n      var diffMins = Math.round(diffInMs % 86400000 % 3600000 / 60000);\n      var startDate = new Date(starting_cell.value);\n      var endDate = new Date(ending_cell.value);\n      var finalEvent = {\n        start: {\n          masked_value: startDate.toISOString(),\n          value: startDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        end: {\n          masked_value: endDate.toISOString(),\n          value: endDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        distance: diffMins + diffInHrs * 60,\n        status: 'popup-initiated'\n      };\n      var updated_events = this.day_events[starting_cell.value];\n      if (!updated_events) updated_events = [];\n      updated_events.push(finalEvent);\n      this.$set(this.day_events, starting_cell.value, updated_events);\n      this.temporary_event = null;\n    },\n    overlapPolice: function overlapPolice(payload) {\n      var _this4 = this;\n\n      if (!payload.current_cell) return;\n      var overlapped = Object.keys(this.day_events).map(function (evKey) {\n        return _this4.day_events[evKey];\n      }).flat().filter(function (event) {\n        var cellStart = new Date(payload.starting_cell.value);\n        var cellEnd = new Date(payload.ending_cell.value);\n        var eventStarts = new Date(event.start.value);\n        var eventEnds = new Date(event.end.value);\n        return cellEnd > eventStarts && cellEnd < eventEnds || cellStart < eventStarts && cellEnd > eventStarts;\n      });\n\n      if (!overlapped || overlapped.length === 0) {\n        return;\n      }\n\n      var newPayload = payload;\n\n      if (payload.direction === 'reverse') {\n        var needed_cell = overlapped[0].end;\n        var event_cell = this.day_cells.find(function (c) {\n          return c.value === needed_cell.masked_value;\n        });\n        var cell = this.day_cells[event_cell.index];\n        newPayload.starting_cell = {\n          value: cell.value,\n          index: cell.index\n        };\n        newPayload.current_cell = {\n          value: cell.value,\n          index: cell.index\n        };\n      } else {\n        var _needed_cell = overlapped[0].start;\n\n        var _event_cell = this.day_cells.find(function (c) {\n          return c.value === _needed_cell.masked_value;\n        });\n\n        var _cell = this.day_cells[_event_cell.index - 1];\n        newPayload.ending_cell = {\n          value: _cell.value,\n          index: _cell.index\n        };\n      }\n\n      return newPayload;\n    },\n    scrollView: function scrollView() {\n      var topoffset = this.$refs.nowIndicator.offsetTop;\n      console.log('Scrolling to :', topoffset);\n      setTimeout(function () {\n        window.scroll({\n          top: topoffset,\n          left: 0,\n          behavior: 'smooth'\n        });\n      }, 500);\n    }\n  }\n};",{"version":3,"sources":["kalendar-day.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <ul style=\"position: relative;\"\n      :class=\"{\n      'is-weekend': isWeekend, \n      'is-today': isToday,\n      'creating': creator.creating || creator.status === 'popup-initiated'\n    }\"\n      class=\"kalendar-day\"\n      :ref=\"day.value + '-reference'\">\n    <div ref=\"nowIndicator\"\n         :class=\"kalendar_options.style === 'material_design' ? 'hour-indicator-line' : 'hour-indicator-tooltip'\"\n         v-if=\"isToday\"\n         :style=\"`top:${passedTime}px`\">\n      <span class=\"line\"\n            v-show=\"kalendar_options.style === 'material_design'\"></span>\n    </div>\n    <kalendar-cell v-for=\"(cell, index) in day_cells\"\n                   :constructed-events=\"day_events\"\n                   :key=\"`cell-${index}`\"\n                   :creator=\"creator\"\n                   :cell-data=\"cell\"\n                   :index=\"index\"\n                   @select=\"updateCreator\"\n                   @reset=\"resetEvents()\"\n                   @initiatePopup=\"initiatePopup()\"\n                   :temporary-event=\"temporary_event\" />\n  </ul>\n</template>\n<script>\nconst { cloneObject } = window.kalendarHelpers;\nimport Utils from './utils';\nconst { isToday, isWeekend } = Utils;\n\nimport myWorker from '@/components/kalendar/workers';\n\nexport default {\n  props: ['day', 'passedTime'],\n  created() {\n    // get and render day cells\n    // and then render any event\n    // on top of them\n    this.renderDay();\n  },\n  components: {\n    kalendarCell: () =>\n      import('./kalendar-cell.vue'),\n  },\n  provide() {\n    // provide these methods to children components\n    // for easier access\n    return {\n      kalendarAddEvent: this.addEvent,\n      kalendarClearPopups: this.clearCreatingLeftovers\n    };\n  },\n  // inject kalendar options from parent component\n  inject: ['kalendar_options'],\n  mounted() {\n    if (this.kalendar_options.scrollToNow && this.isToday) this.scrollView();\n  },\n  computed: {\n    isWeekend() {\n      return isWeekend(this.day.value);\n    },\n    isToday() {\n      return isToday(this.day.value);\n    },\n  },\n  data: () => ({\n    // this is the main object\n    // we use to make selections\n    // and control their flows\n    creator: {\n      creating: false,\n      starting_cell: null,\n      original_starting_cell: null,\n      current_cell: null,\n      ending_cell: null,\n      status: null,\n    },\n    // temporary event is an object\n    // that holds values of creator\n    // when the popup is initiated\n    temporary_event: null,\n\n    // day cells and events are used for rendering purposes\n    day_cells: [],\n    day_events: null,\n  }),\n  methods: {\n    renderDay() {\n      myWorker.send('getDayCells', {\n        day: this.day.value,\n        hourOptions: {\n          start_hour: this.kalendar_options.day_starts_at,\n          end_hour: this.kalendar_options.day_ends_at\n        }\n      }).then(reply => {\n        this.day_cells = reply;\n        return this.getDayEvents(this.$kalendar.getEvents());\n      });\n    },\n\n    addEvent(payload) {\n      // validation\n      let validation_message = this.checkEventValidity(payload);\n      if (validation_message !== null) {\n        return Promise.reject(validation_message);\n      }\n\n      // use web worker to generate event\n      // and then render it in the day_events objects\n      let { from, to } = payload;\n      from = kalendarHelpers.getLocaleTime(from);\n      to = kalendarHelpers.getLocaleTime(to);\n      return myWorker.send('constructNewEvent', {\n        event: {\n          ...payload,\n          from,\n          to\n        }\n      }).then(constructed_event => {\n        let { key } = constructed_event;\n        if (this.day_events.hasOwnProperty(key)) {\n          this.day_events[key].push(constructed_event);\n        } else {\n          // must use $set since key wasnt present in the object\n          // vue will fail to render it\n          this.$set(this.day_events, key, [constructed_event]);\n        }\n        let events = this.$kalendar.getEvents();\n        console.log('Adding event to kalendar', payload);\n        events.push({\n          ...payload,\n          id: constructed_event.id\n        });\n        this.$kalendar.updateEvents(events);\n      });\n    },\n\n    // this is not called inside this component\n    // but rather from the kalendar-weekview component\n    // which targets it using $refs object.\n    removeEvent(payload) {\n      let events = this.$kalendar.getEvents();\n      let eventIndex = events.findIndex(event => event.id === payload.id);\n      if (eventIndex < 0) return;\n      events.splice(eventIndex, 1);\n      let index = this.day_events[payload.key]\n        .findIndex(event => event.id === payload.id);\n      this.day_events[payload.key].splice(index, 1);\n      this.$kalendar.updateEvents(events);\n      return Promise.resolve();\n    },\n    checkEventValidity(payload) {\n      let { from, to } = payload;\n      if (!from || !to) return 'No dates were provided in the payload';\n      /*if (isoFrom !== from) {\n        return 'From date is not ISO format';\n      }\n      if (isoTo !== to) {\n        return 'To date is not ISO format';\n      }*/\n      return null;\n    },\n    getDayEvents(events) {\n      let clonedEvents = events.map(event => cloneObject(event));\n      return myWorker.send('constructDayEvents', {\n        events: clonedEvents,\n        day: this.day.value,\n      }).then(constructed_events => {\n        this.day_events = constructed_events;\n      })\n    },\n    clearCreatingLeftovers() {\n      for (let key in this.day_events) {\n        let hasPending = this.day_events[key].some(event => {\n          return event.status === 'popup-initiated' || event.status === 'creating';\n        });\n        if (hasPending) {\n          let completed = this.day_events[key]\n            .filter(event => event.status === 'completed');\n          this.$set(this.day_events, key, completed);\n          if (completed.length === 0) {\n            delete this.day_events[key];\n          }\n        }\n      }\n      this.resetEvents();\n    },\n    resetEvents() {\n      if (!this.creator.creating && this.creator.status === null) return;\n      this.creator = {\n        creating: false,\n        starting_cell: null,\n        original_starting_cell: null,\n        current_cell: null,\n        ending_cell: null,\n        status: null,\n        temporary_id: null\n      };\n      this.temporary_event = null;\n    },\n\n    // this method is what we use\n    // to start the flow of selecting a new cell\n    // while the creator is enabled\n    updateCreator(payload) {\n      this.creator = {\n        ...this.validateSelection(payload),\n        status: 'creating'\n      };\n      if (this.kalendar_options.overlap === false && Object.keys(this.day_events).length > 0) {\n        let fixedOverlap = this.overlapPolice(payload);\n        if (fixedOverlap) {\n          this.creator = this.validateSelection(fixedOverlap);\n          this.selectCell();\n          this.initiatePopup();\n          return;\n        }\n      }\n      this.selectCell();\n    },\n\n    // when the direction is reversed,\n    // the ending cell is actually the originally selected cell\n    validateSelection(event) {\n      let { original_starting_cell, starting_cell, current_cell } = event;\n      if (event.direction === 'reverse' &&\n        original_starting_cell.index > current_cell.index) {\n        return {\n          ...event,\n          starting_cell: current_cell,\n          ending_cell: original_starting_cell\n        }\n      }\n      return event;\n    },\n    selectCell() {\n      if (!this.creator.creating) return;\n      let {\n        creating,\n        ending_cell,\n        current_cell,\n        starting_cell,\n        original_starting_cell\n      } = this.creator;\n\n      let real_ending_cell_index = ending_cell.index + 1;\n      ending_cell = this.day_cells[real_ending_cell_index];\n\n      const diffInMs = new Date(ending_cell.value) - new Date(starting_cell.value);\n      const diffInHrs = Math.floor((diffInMs % 86400000) / 3600000);\n      const diffMins = Math.round(((diffInMs % 86400000) % 3600000) / 60000);\n      let startDate = new Date(starting_cell.value);\n      let endDate = new Date(ending_cell.value);\n\n      let distance = diffMins + (diffInHrs * 60);\n\n      this.temporary_event = {\n        start: {\n          masked_value: startDate.toISOString(),\n          value: startDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        end: {\n          masked_value: endDate.toISOString(),\n          value: endDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        distance: distance,\n        status: 'creating'\n      };\n    },\n    initiatePopup() {\n      if (this.creating && this.creator.status !== 'creating') return;\n      this.creator = {\n        ...this.creator,\n        status: 'popup-initiated',\n        creating: false\n      };\n      let { ending_cell, current_cell, starting_cell, original_starting_cell } = this.creator;\n      let real_ending_cell_index = ending_cell.index + 1;\n      ending_cell = this.day_cells[real_ending_cell_index];\n\n      const diffInMs = new Date(ending_cell.value) - new Date(starting_cell.value);\n      const diffInHrs = Math.floor((diffInMs % 86400000) / 3600000);\n      const diffMins = Math.round(((diffInMs % 86400000) % 3600000) / 60000);\n      let startDate = new Date(starting_cell.value);\n      let endDate = new Date(ending_cell.value);\n\n      let finalEvent = {\n        start: {\n          masked_value: startDate.toISOString(),\n          value: startDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        end: {\n          masked_value: endDate.toISOString(),\n          value: endDate.toISOString(),\n          rounded: false,\n          round_offset: null\n        },\n        distance: diffMins + (diffInHrs * 60),\n        status: 'popup-initiated'\n      };\n\n      let updated_events = this.day_events[starting_cell.value];\n      if (!updated_events) updated_events = [];\n      updated_events.push(finalEvent);\n\n      this.$set(this.day_events, starting_cell.value, updated_events);\n      this.temporary_event = null;\n    },\n    overlapPolice(payload) {\n      if (!payload.current_cell) return;\n      let overlapped = Object.keys(this.day_events)\n        .map(evKey => {\n          return this.day_events[evKey]\n        })\n        .flat()\n        .filter(event => {\n          let cellStart = new Date(payload.starting_cell.value);\n          let cellEnd = new Date(payload.ending_cell.value);\n          let eventStarts = new Date(event.start.value);\n          let eventEnds = new Date(event.end.value);\n          return (cellEnd > eventStarts && cellEnd < eventEnds) ||\n            (cellStart < eventStarts && cellEnd > eventStarts);\n        });\n      if (!overlapped || overlapped.length === 0) {\n        return;\n      }\n      let newPayload = payload;\n      if (payload.direction === 'reverse') {\n        let needed_cell = overlapped[0].end;\n        let event_cell = this.day_cells.find(c => c.value === needed_cell.masked_value);\n        let cell = this.day_cells[event_cell.index];\n        newPayload.starting_cell = {\n          value: cell.value,\n          index: cell.index\n        };\n        newPayload.current_cell = {\n          value: cell.value,\n          index: cell.index\n        };\n      } else {\n        let needed_cell = overlapped[0].start;\n        let event_cell = this.day_cells.find(c => c.value === needed_cell.masked_value);\n        let cell = this.day_cells[event_cell.index - 1];\n        newPayload.ending_cell = {\n          value: cell.value,\n          index: cell.index\n        };\n      }\n      return newPayload;\n    },\n    scrollView() {\n      let topoffset = this.$refs.nowIndicator.offsetTop;\n      console.log('Scrolling to :', topoffset);\n      setTimeout(() => {\n        window.scroll({ top: topoffset, left: 0, behavior: 'smooth' });\n      }, 500);\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\nul.kalendar-day {\n  position: relative;\n  background-color: white;\n\n  &.is-weekend {\n    background-color: var(--weekend-color);\n  }\n\n  &.is-today {\n    background-color: var(--current-day-color);\n  }\n\n  .clear {\n    position: absolute;\n    z-index: 1;\n    top: -20px;\n    right: 0;\n    font-size: 10px;\n  }\n\n  &.creating {\n    z-index: 11;\n\n    .created-event {\n      pointer-events: none;\n    }\n  }\n}\n</style>"],"sourceRoot":"src/components/kalendar"}]}